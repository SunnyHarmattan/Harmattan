# Deploying a Static Website on AWS S3 Using Terraform: Step By Step Walkthrough

I'll walk you through the process of deploying a static website on AWS S3 using Terraform. This approach gives you infrastructure as code that's repeatable and version-controlled.

## Prerequisites

- AWS account with appropriate permissions
- AWS CLI installed and configured
- Terraform installed (version 1.0+)
- Basic understanding of Terraform and AWS
- Your static website files ready for deployment

## Step 1: Set Up the Terraform Project Structure

First, create a directory for your Terraform project:

```bash
mkdir s3-static-website
cd s3-static-website
```

Create the main Terraform files:

```bash
touch main.tf variables.tf outputs.tf
```

## Step 2: Configure Terraform Provider

Add the following to your `main.tf` file:

```terraform
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}
```

Add to your `variables.tf`:

```terraform
variable "aws_region" {
  description = "AWS region to deploy resources"
  type        = string
  default     = "us-east-1"
}

variable "website_bucket_name" {
  description = "Name of the S3 bucket to host website"
  type        = string
}
```

## Step 3: Create the S3 Bucket Resource

Add the following to your `main.tf`:

```terraform
resource "aws_s3_bucket" "website" {
  bucket = var.website_bucket_name

  tags = {
    Name        = "Static Website Bucket"
    Environment = "Production"
  }
}

resource "aws_s3_bucket_website_configuration" "website" {
  bucket = aws_s3_bucket.website.id

  index_document {
    suffix = "index.html"
  }

  error_document {
    key = "error.html"
  }
}

resource "aws_s3_bucket_acl" "website" {
  bucket = aws_s3_bucket.website.id
  acl    = "public-read"
}

resource "aws_s3_bucket_policy" "website" {
  bucket = aws_s3_bucket.website.id
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action    = ["s3:GetObject"]
        Effect    = "Allow"
        Resource  = "${aws_s3_bucket.website.arn}/*"
        Principal = "*"
      }
    ]
  })
}
```

## Step 4: Add Outputs

In your `outputs.tf` file:

```terraform
output "website_bucket_name" {
  description = "Name of the S3 bucket"
  value       = aws_s3_bucket.website.id
}

output "website_endpoint" {
  description = "Website endpoint"
  value       = aws_s3_bucket_website_configuration.website.website_endpoint
}
```

## Step 5: Initialize and Apply Terraform Configuration

```bash
terraform init
terraform plan -var="website_bucket_name=your-unique-bucket-name"
terraform apply -var="website_bucket_name=your-unique-bucket-name"
```

## Step 6: Upload Your Website Content

After Terraform has successfully created your infrastructure, you can upload your website files to the S3 bucket:

```bash
aws s3 sync ./your-website-directory s3://your-unique-bucket-name/
```

## Step 7: Access Your Website

Your website is now accessible at the website endpoint that was output by Terraform. It will look something like:
`http://your-unique-bucket-name.s3-website-us-east-1.amazonaws.com`

## Advanced Options

### Add CloudFront for Content Delivery

For a more complete solution, you might want to add CloudFront to serve your content with a CDN. Here's how you would extend your `main.tf`:

```terraform
resource "aws_cloudfront_distribution" "website_distribution" {
  origin {
    domain_name = aws_s3_bucket_website_configuration.website.website_endpoint
    origin_id   = "S3-${var.website_bucket_name}"
    
    custom_origin_config {
      http_port              = 80
      https_port             = 443
      origin_protocol_policy = "http-only"
      origin_ssl_protocols   = ["TLSv1", "TLSv1.1", "TLSv1.2"]
    }
  }

  enabled             = true
  is_ipv6_enabled     = true
  default_root_object = "index.html"

  default_cache_behavior {
    allowed_methods  = ["GET", "HEAD"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "S3-${var.website_bucket_name}"

    forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "redirect-to-https"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }

  price_class = "PriceClass_100"

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }
}
```

Would you like me to explain any particular part of this process in more detail?
